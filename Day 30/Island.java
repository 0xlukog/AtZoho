import java.util.HashMap;
import java.util.LinkedHashMap;

public class Island {
    public static int findOnes(int i, int j, HashMap<String, Integer> visited, int size, int [][] grid,int row,int col) {
        if (!visited.containsKey(i + "" + j)) {
            visited.put(i + "" + j, 1);
            if ((i>=0 && j>=0) &&(i<row&& j<col)&& grid[i][j]==1) {
                size++;

                    size += findOnes(i, j + 1, visited, 0, grid,row,col);
                    size += findOnes(i + 1, j, visited, 0, grid,row,col);
                    size += findOnes(i, j - 1, visited, 0, grid,row,col);
                    size += findOnes(i - 1, j, visited, 0, grid,row,col);

            }
        }
        return size;
    }

    public static int maxAreaOfIsland(int[][] grid) {
        int col = grid[0].length;
        int row = grid.length;
        HashMap<String, Integer> island = new HashMap<>();
        HashMap<String, Integer> visited = new LinkedHashMap<>();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                // visited.put(i+""+j,1);
                int size = findOnes(i, j, visited, 0, grid,row,col);
                if (size > 0) {
                    island.put("(" + i + "," + j + ")", size);
                    // System.out.println("(" + i + "," + j + ")" + island.get("(" + i + "," + j +
                    // ")"));
                }

            }
        }
        int max = 0;
        for (String key : island.keySet()) {
            if (max < island.get(key)) {
                max = island.get(key);
            }
        }
        System.out.println(max);
        return 0;
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        int grid[][] = {{1,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0},
    {0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1},
    {1,0,1,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,0,1},
    {0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1},
    {1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,1},
    {0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1},
    {1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,0},
    {0,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1},
    {1,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,0},
    {0,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1},
    {0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0},
    {1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1},
    {1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1},
    {1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,1},
    {0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,0},
    {0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1},
    {0,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,1,0,1,1},
    {1,0,0,1,0,1,0,0,1,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,1},
    {0,0,0,0,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0},
    {1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,0,0,1},
    {1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,1,0,1,1},
    {1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,0},
    {1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0},
    {0,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1},
    {1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0},
    {0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0},
    {0,1,1,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1},
    {1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0},
    {1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0},
    {0,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,1,0},
    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1},
    {0,1,1,0,0,0,0,1,0,1,0,0,1,0,1,1,1,1,0,0,0,1,1,0,0},
    {0,1,0,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,1},
    {0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0},
    {1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1},
    {1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1},
    {0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1},
    {0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1},
    {1,1,0,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0},
    {1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0},
    {1,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1},
    {0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0},
    {1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1},
    {1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0},
    {1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {1,1,1,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,1,1,0,0,1},
    {0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1},
    {0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,1},
    {0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0},
    {1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,1,0}};
        
        // { { 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
        //         { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
        //         { 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
        //         { 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0 },
        //         { 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0 },
        //         { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
        //         { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
        //         { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 } };
        maxAreaOfIsland(grid);
    }
}

class Solution {

}

   